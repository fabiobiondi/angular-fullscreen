{"version":3,"sources":["angular-fullscreen-toggle.js"],"names":["window","createModule","angular","module","factory","$document","$rootScope","document","emitter","$new","on","$emit","serviceInstance","isEnabled","$on","bind","all","options","enable","documentElement","element","requestFullScreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","cancel","cancelFullScreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","toggleAll","isSupported","docElm","directive","Fullscreen","link","$scope","$element","$attrs","fullscreen","$watch","value","addClass","removeClass","removeFullscreenHandler","evt","isFullscreenEnabled","$evalAsync","$eval","undefined","onlyWatchedProperty","ev","define","amd","exports","name"],"mappings":";CAAA,SAAUA,GACP,IAAIC,EAAe,SAASC,GACzB,IAAIC,EAASD,EAAQC,OAAO,4BAA6B,IAoGzD,OAlGAA,EAAOC,QAAQ,aAAc,CAAC,YAAa,aAAc,SAAUC,EAAUC,GAC1E,IAAIC,EAAWF,EAAU,GAErBG,EAAUF,EAAWG,OAIzBJ,EAAUK,GAAG,kFAAkF,WAC5FF,EAAQG,MAAM,sBAAuBC,EAAgBC,gBAGxD,IAAID,EAAkB,CACnBE,IAAKZ,EAAQa,KAAKP,EAASA,EAAQM,KACnCE,IAAK,SAASC,GACXL,EAAgBM,OAAQX,EAASY,gBAAiBF,IAErDC,OAAQ,SAASE,EAASH,GACpBG,EAAQC,kBACRD,EAAQC,kBAAkBJ,GACnBG,EAAQE,qBACfF,EAAQE,uBACDF,EAAQG,wBACfH,EAAQG,0BACAH,EAAQI,qBAChBJ,EAAQI,uBAGdC,OAAQ,WACFlB,EAASmB,iBACTnB,EAASmB,mBACFnB,EAASoB,oBAChBpB,EAASoB,sBACFpB,EAASqB,qBAChBrB,EAASqB,uBACDrB,EAASsB,kBACjBtB,EAASsB,oBAGfhB,UAAW,WAER,SADwBN,EAASuB,mBAAqBvB,EAASwB,sBAAwBxB,EAASyB,yBAA2BzB,EAAS0B,sBAGvIC,UAAW,WACRtB,EAAgBC,YAAcD,EAAgBa,SAAWb,EAAgBI,OAE5EmB,YAAa,WACV,IAAIC,EAAS7B,EAASY,gBAEtB,SADwBiB,EAAOf,mBAAqBe,EAAOd,sBAAwBc,EAAOb,yBAA2Ba,EAAOZ,uBAKlI,OAAOZ,KAGVT,EAAOkC,UAAU,aAAc,CAAC,aAAc,SAASC,GACpD,MAAO,CACJC,KAAO,SAAUC,EAAQC,EAAUC,GAEhC,GAAIA,EAAOC,WAAY,CACpBH,EAAOI,OAAOF,EAAOC,YAAY,SAASE,GACvC,IAAIhC,EAAYyB,EAAWzB,YACvBgC,IAAUhC,GACXyB,EAAWpB,OAAOuB,EAAS,IAC3BA,EAASK,SAAS,oBACTD,GAAShC,IAClByB,EAAWb,SACXgB,EAASM,YAAY,sBAM3B,IAAIC,EAA0BV,EAAWxB,IAAI,uBAAuB,SAASmC,EAAKC,GAC3EA,GACDV,EAAOW,YAAW,WACfX,EAAOY,MAAMV,EAAOC,WAAa,WACjCF,EAASM,YAAY,wBAK9BP,EAAO1B,IAAI,YAAY,WACpBkC,WAGC,CACJ,QAAmCK,IAA/BX,EAAOY,oBACR,OAGHb,EAAS/B,GAAG,SAAS,SAAU6C,GAC5BjB,EAAWpB,OAASuB,EAAS,aAMrCtC,GAGY,mBAAXqD,QAAyBA,OAAOC,IACxCD,OAAO,4BAA6B,CAAC,YAAY,SAAUtD,GAAW,OAAOD,EAAaC,MAChE,oBAAXC,QAA0BA,OAAOuD,QAChDvD,OAAOuD,QAAUzD,EAAaD,EAAOE,SAASyD,KAE9C1D,EAAaD,EAAOE,SA9G1B,CAgHGF","file":"../angular-fullscreen-toggle.min.js","sourcesContent":["(function(window) {\n   var createModule = function(angular) {\n      var module = angular.module('angular-fullscreen-toggle', []);\n\n      module.factory('Fullscreen', ['$document', '$rootScope', function ($document,$rootScope) {\n         var document = $document[0];\n\n         var emitter = $rootScope.$new();\n\n         // listen event on document instead of element to avoid firefox limitation\n         // see https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode\n         $document.on('fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange', function(){\n            emitter.$emit('ngFullscreen.change', serviceInstance.isEnabled());\n         });\n\n         var serviceInstance = {\n            $on: angular.bind(emitter, emitter.$on),\n            all: function(options) {\n               serviceInstance.enable( document.documentElement, options);\n            },\n            enable: function(element, options) {\n               if(element.requestFullScreen) {\n                  element.requestFullScreen(options);\n               } else if(element.mozRequestFullScreen) {\n                  element.mozRequestFullScreen();\n               } else if(element.webkitRequestFullscreen) {\n                  element.webkitRequestFullscreen();\n               } else if (element.msRequestFullscreen) {\n                  element.msRequestFullscreen();\n               }\n            },\n            cancel: function() {\n               if(document.cancelFullScreen) {\n                  document.cancelFullScreen();\n               } else if(document.mozCancelFullScreen) {\n                  document.mozCancelFullScreen();\n               } else if(document.webkitExitFullscreen) {\n                  document.webkitExitFullscreen();\n               } else if (document.msExitFullscreen) {\n                  document.msExitFullscreen();\n               }\n            },\n            isEnabled: function(){\n               var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;\n               return fullscreenElement ? true : false;\n            },\n            toggleAll: function(){\n               serviceInstance.isEnabled() ? serviceInstance.cancel() : serviceInstance.all();\n            },\n            isSupported: function(){\n               var docElm = document.documentElement;\n               var requestFullscreen = docElm.requestFullScreen || docElm.mozRequestFullScreen || docElm.webkitRequestFullscreen || docElm.msRequestFullscreen;\n               return requestFullscreen ? true : false;\n            }\n         };\n\n         return serviceInstance;\n      }]);\n\n      module.directive('fullscreen', ['Fullscreen', function(Fullscreen) {\n         return {\n            link : function ($scope, $element, $attrs) {\n               // Watch for changes on scope if model is provided\n               if ($attrs.fullscreen) {\n                  $scope.$watch($attrs.fullscreen, function(value) {\n                     var isEnabled = Fullscreen.isEnabled();\n                     if (value && !isEnabled) {\n                        Fullscreen.enable($element[0]);\n                        $element.addClass('isInFullScreen');\n                     } else if (!value && isEnabled) {\n                        Fullscreen.cancel();\n                        $element.removeClass('isInFullScreen');\n                     }\n                  });\n\n                  // Listen on the `ngFullscreen.change`\n                  // the event will fire when anything changes the fullscreen mode\n                  var removeFullscreenHandler = Fullscreen.$on('ngFullscreen.change', function(evt, isFullscreenEnabled){\n                     if(!isFullscreenEnabled){\n                        $scope.$evalAsync(function(){\n                           $scope.$eval($attrs.fullscreen + '= false');\n                           $element.removeClass('isInFullScreen');\n                        });\n                     }\n                  });\n\n                  $scope.$on('$destroy', function() {\n                     removeFullscreenHandler();\n                  });\n\n               } else {\n                  if ($attrs.onlyWatchedProperty !== undefined) {\n                     return;\n                  }\n\n                  $element.on('click', function (ev) {\n                     Fullscreen.enable(  $element[0] );\n                  });\n               }\n            }\n         };\n      }]);\n      return module;\n   };\n\n   if (typeof define === \"function\" && define.amd) {\n      define(\"angular-fullscreen-toggle\", ['angular'], function (angular) { return createModule(angular); } );\n   } else if (typeof module !== 'undefined' && module.exports) {\n      module.exports = createModule(window.angular).name;\n   } else {\n      createModule(window.angular);\n   }\n})(window);\n"]}